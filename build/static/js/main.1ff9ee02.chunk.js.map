{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateStates","imageUrl","imageName","setState","handleChange","e","file","target","files","ImageCompressor","compressionObj","quality","mimeType","maxWidth","success","result","FormData","append","name","URL","createObjectURL","error","console","log","message","handleClick","saveAs","state","react_default","a","createElement","className","style","width","float","ref","type","id","accept","onChange","src","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAiFeA,cA1Eb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,aAAe,SAACC,EAAUC,GACxBT,EAAKU,SAAS,CACZF,WACAC,eAXcT,EAelBW,aAAe,SAACC,GACd,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GAE5B,GAAKF,EAUiB,IAAIG,IAAgBH,EAAM,CAC9CI,eAPmB,CACnBC,QAAS,GACTC,SAAU,aACVC,SAAU,KAKVC,QAAU,SAACC,IACQ,IAAIC,UACZC,OAAO,OAAQF,EAAQA,EAAOG,MAEvC,IAAMjB,EAAWkB,IAAIC,gBAAgBL,GAC/Bb,EAAYa,EAAOG,KAMzBzB,EAAKO,aAAaC,EAAUC,IAG9BmB,MAhB8C,SAgBxChB,GACJiB,QAAQC,IAAIlB,EAAEmB,aA7CF/B,EAmDlBgC,YAAc,SAACpB,GACbqB,IAAOjC,EAAKkC,MAAM1B,SAAUR,EAAKkC,MAAMzB,YAlDvCT,EAAKkC,MAAQ,CACX1B,SAAU,GACVC,UAAW,IAJGT,wEAyDhB,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,MAAO,OAAOC,MAAO,SAChCN,EAAAC,EAAAC,cAAA,mCAAiCF,EAAAC,EAAAC,cAAA,WACjCF,EAAAC,EAAAC,cAAA,SAAOK,IAAI,cAAcC,KAAK,OAAOC,GAAG,QAAQC,OAAO,UAAUC,SAAU3C,KAAKQ,gBAElFwB,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,MAAO,OAAOC,MAAO,SAChCN,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACnB,SAAU,SAAUwB,GAAG,cAAcG,IAAK5C,KAAK+B,MAAM1B,SAAUwC,IAAI,MAElFb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,MAAO,OAAOC,MAAO,SAChCN,EAAAC,EAAAC,cAAA,UAAQO,GAAG,cAAcK,QAAS9C,KAAK6B,aAAvC,qBArEQkB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ff9ee02.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ImageCompressor from 'image-compressor.js';\nimport saveAs from 'file-saver';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      imageUrl: \"\",\n      imageName: \"\"\n    }\n  }\n\n  updateStates = (imageUrl, imageName) => {\n    this.setState({\n      imageUrl,\n      imageName\n    })\n  }\n\n  handleChange = (e) => {\n    const file = e.target.files[0];\n  \n    if (!file) {\n      return;\n    }\n\n    let compressionObj = {\n      quality: 0.8,\n      mimeType: 'image/jpeg',\n      maxWidth: 700\n    };\n  \n    let imageCompressor = new ImageCompressor(file, {\n      compressionObj,\n      success : (result) => {\n        const formData = new FormData();  \n        formData.append('file', result, result.name);\n\n        const imageUrl = URL.createObjectURL(result);\n        const imageName = result.name;\n        /*const img = document.getElementById('resultImage');\n        \n        img.addEventListener('load', () => URL.revokeObjectURL(imageUrl));\n        document.querySelector('img').src = imageUrl;*/\n\n        this.updateStates(imageUrl, imageName)\n\n      },\n      error(e) {\n        console.log(e.message);\n      },\n    });\n\n  }\n\n  handleClick = (e) => {\n    saveAs(this.state.imageUrl, this.state.imageName);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{width: '100%',float: 'left'}}>\n          <label>Insert image here:</label><br  />\n          <input ref=\"uploadImage\" type=\"file\" id=\"image\" accept=\"image/*\" onChange={this.handleChange} />\n        </div>\n        <div style={{width: '100%',float: 'left'}} >\n          <img style={{maxWidth: '700px'}} id=\"resultImage\" src={this.state.imageUrl} alt=\"\" />\n        </div>\n        <div style={{width: '100%',float: 'left'}}>\n          <button id=\"downloadImg\" onClick={this.handleClick}>Download</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}